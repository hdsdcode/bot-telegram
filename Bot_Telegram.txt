CHAT BOT DO ZERO

‚úÖ Objetivo:
Fazer um bot no Telegram, em Python, que:
Interage com o usu√°rio para coletar dados do curr√≠culo
Valida as respostas (ex: evitar zoeira ou respostas fora do contexto)
Gera um PDF autom√°tico
Envia o PDF no pr√≥prio chat para o usu√°rio imprimir

O que voc√™ precisa:
Visual Studio Code ‚úÖ (voc√™ j√° tem)
Python instalado (veremos no passo 1)
Criar um bot no Telegram com o BotFather ‚úÖ (veremos no passo 2)
C√≥digo que vamos escrever juntos ‚úÖ
Depois, podemos publicar na nuvem (Heroku, Railway etc.)

üöÄ PARTE 1 ‚Äì Preparar o ambiente
1¬∫ passo ‚Äì Verificar se o Python est√° instalado
Abra o terminal do Visual Studio Code (aperte Ctrl + aspas, ou v√° em Terminal > Novo Terminal) e digite:
python --version


Definicao nome do Bot no Telegram
Nome: curriculo2025_bot
üîë Token do bot:
7501669528:AAGMiGmscYFhhnSwGsENZlu1kcauoVI-UIM
Link do bot: 
t.me/curriculo2025_bot
Endere√ßo do bot: https://t.me/curriculo2025_bot

Estartar o bot: O path abaixo, esta o caminho do c√≥digo python
C:\Users\hamilton\Documents\bot-curriculo
python bot_curriculo.py



PARTE 2 (COLAR O C√ìDIGO)
Nome do arquivo Python:
bot_curriculo.py

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from fpdf import FPDF
import io
import re

# Etapas da conversa
NOME, CONTATO, EXPERIENCIA, EDUCACAO, HABILIDADES = range(5)

def validar_texto(texto, min_palavras=2):
    return len(texto.split()) >= min_palavras

def validar_email_ou_telefone(texto):
    email_regex = r'^\S+@\S+\.\S+$'
    telefone_regex = r'^\d{8,15}$'
    return bool(re.match(email_regex, texto)) or bool(re.match(telefone_regex, texto))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ol√°! Vamos montar seu curr√≠culo. Qual seu nome completo?")
    return NOME

async def nome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not validar_texto(update.message.text):
        await update.message.reply_text("Por favor, digite seu nome completo (m√≠nimo 2 palavras).")
        return NOME
    context.user_data['nome'] = update.message.text
    await update.message.reply_text("Qual seu telefone (s√≥ n√∫meros) ou e-mail para contato?")
    return CONTATO

async def contato(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not validar_email_ou_telefone(update.message.text):
        await update.message.reply_text("Digite um telefone (apenas n√∫meros) ou um e-mail v√°lido.")
        return CONTATO
    context.user_data['contato'] = update.message.text
    await update.message.reply_text("Descreva brevemente sua experi√™ncia profissional:")
    return EXPERIENCIA

async def experiencia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not validar_texto(update.message.text, 5):
        await update.message.reply_text("Por favor, escreva ao menos 5 palavras sobre sua experi√™ncia.")
        return EXPERIENCIA
    context.user_data['experiencia'] = update.message.text
    await update.message.reply_text("Descreva sua forma√ß√£o (escola, curso etc):")
    return EDUCACAO

async def educacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not validar_texto(update.message.text, 3):
        await update.message.reply_text("Descreva um pouco melhor sua forma√ß√£o (m√≠nimo 3 palavras).")
        return EDUCACAO
    context.user_data['educacao'] = update.message.text
    await update.message.reply_text("Liste algumas habilidades que voc√™ tem:")
    return HABILIDADES

async def habilidades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['habilidades'] = update.message.text

    # Gerar PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Nome: {context.user_data['nome']}", ln=True)
    pdf.cell(0, 10, f"Contato: {context.user_data['contato']}", ln=True)
    pdf.cell(0, 10, "Experi√™ncia:", ln=True)
    pdf.multi_cell(0, 10, context.user_data['experiencia'])
    pdf.cell(0, 10, "Educa√ß√£o:", ln=True)
    pdf.multi_cell(0, 10, context.user_data['educacao'])
    pdf.cell(0, 10, "Habilidades:", ln=True)
    pdf.multi_cell(0, 10, context.user_data['habilidades'])

    pdf_buffer = io.BytesIO()
    pdf.output(pdf_buffer)
    pdf_buffer.seek(0)

    await update.message.reply_document(document=pdf_buffer, filename="curriculo.pdf")
    await update.message.reply_text("Curr√≠culo gerado com sucesso! Se quiser gerar outro, digite /start.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Opera√ß√£o cancelada. Para come√ßar de novo, digite /start")
    return ConversationHandler.END

if __name__ == '__main__':
    token = "7501669528:AAGMiGmscYFhhnSwGsENZlu1kcauoVI-UIM"

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nome)],
            CONTATO: [MessageHandler(filters.TEXT & ~filters.COMMAND, contato)],
            EXPERIENCIA: [MessageHandler(filters.TEXT & ~filters.COMMAND, experiencia)],
            EDUCACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, educacao)],
            HABILIDADES: [MessageHandler(filters.TEXT & ~filters.COMMAND, habilidades)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    print("‚úÖ Bot rodando... Abra o Telegram e envie /start para seu bot.")
    app.run_polling()
	
3¬∫-PASSO (INSTALAR A BIBLIOTECA NO TERMINAL DO VISUAL STUDIO CODE)
pip install python-telegram-bot fpdf





