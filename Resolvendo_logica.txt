Na questão "Idiomas" preciso que implemente:

Na "Situação:"
Se for "S" para "Concluído", então, "Informe o ano de conclusão do Curso?"
Se for "C" para "Cursando", então, "Cursando", tanto para opções 1, 2 e 3


Estou fazendo um projeto MVP para instituição carente sem fins lucrativos, é um curriculo utilizando python e o telegram poderia me ajudar
eu ja tenho um código, preciso que me ajude
Esse que vou te enviar agora é o código 1, logo em seguida vou te enviar o código 2
Vou te falar o que eu preciso ok

O código 2 não tem a última pergunta que seria "Idiomas", preciso que adicione "Idiomas" igual com a mesma lógica que esta no código 1 ok?
Vou te passar o código 1 para você analisar a questão "Idiomas" ok?

Esta assim, preciso que implemente a sua lógica que esta correta
 "Nome da última empresa trabalhada:"
 "Nome da penúltima empresa trabalhada:"
 
 Quero que o bot pergunte: Quantas empresas você ja trabalhou? (0, 1, 2)
 =======================================================================================================================================================================
 
 # ACERTAR ESSA PARTE #
 Preciso que faça a seguinte alteração, na pergunta abaixo:
 Na pergunta: "Você concluiu o Ensino Médio? Digite "S" para "Sim" ou "N" para "Não:
 Se a resposta for "N" então pule as "Pergunta 1" e "Pergunta 2" ja pule direto sem passar pelas perguntas abaixo, pois só pode passar por essas etapas 
 quem "Concluiu o Ensino Médio
 
 "Pergunta 1"
 "Quantas graduações você possui? (Digite 0 para pular):
 
 "Pergunta 2"
 "Quantas Pós-graduações você possui? (Digite 0 para pular):
 
 =========================================================================================================================================================================
 Após essa pergunta o bot travou aqui e não gerou o currículo ao digitar S
 📚 Liste seus cursos adicionais separados por vírgula (Ex: Java, JavaScript, Excel):
  Ótimo! Coletamos todas as informações. Deseja gerar o currículo em PDF? (S/N)
    ⚠️ Houve um erro ao gerar o currículo. Tente novamente ou verifique as informações fornecidas. Erro: expected str, bytes or os.PathLike object, not BytesIO
 
 FALTA ESTA 
  Ótimo! Seu currículo está pronto. Deseja gerar o PDF? (S/N)
 
 ALTERAR ESSA
 "Digite seu estado civil (Ex: Solteiro, Casado):
 
 
 # AQUI FOI ACERTADO, MA O CÓDIGO ESTA TRAVANDO EM GERAR O CURRÍCULO
 ✅ Ótimo! Coletamos todas as informações. Deseja gerar o currículo em PDF? (S/N)
 
 from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from fpdf import FPDF
import io
import logging
import re

# --- Configuração do Logger ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Constantes para Estados da Conversa ---
(
    ESCOLHA, NOME, IDADE, ESTADO_CIVIL, TELEFONE, EMAIL,
    FORMA_2GRAU, ANO_2GRAU,

    # Estados genéricos para Formação Acadêmica
    ASK_QTD_GRAD, ASK_FACULDADE, ASK_CURSO, ASK_SITUACAO, ASK_ANO_GRAD,
    ASK_QTD_POS, ASK_POS_FACULDADE, ASK_POS_CURSO, ASK_POS_SITUACAO, ASK_POS_ANO,
    ADD_ACADEMIC_ITEM,

    # Estados genéricos para Experiência Profissional
    TIPO_CONTRATO, # NOVO ESTADO
    EMPRESA, CARGO, ADM, DEM, ATIVIDADES, RESULTADOS, ADD_EMP, 
    MEI_TRABALHOS, # NOVO ESTADO PARA MEI

    # Estados genéricos para Idiomas
    IDIOMAS_SIM, ASK_IDIOMA_INST, ASK_IDIOMA_NOME, ASK_IDIOMA_NIVEL, ASK_IDIOMA_INI, ASK_IDIOMA_FIM,
    ADD_IDIOMA,

    CURSOS, REINICIAR, CANCEL
) = range(38) # O número de estados está correto para 37

# --- Validações ---
def validar_texto(texto, min_palavras=2):
    return len(texto.strip().split()) >= min_palavras

def validar_email(texto):
    return re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", texto) is not None

def validar_telefone(texto):
    return texto.isdigit() and 8 <= len(texto) <= 15

def validar_ano(texto):
    if not texto.isdigit() or len(texto) != 4:
        return False
    ano = int(texto)
    return 1900 <= ano <= 2100

def validar_nivel_idioma(nivel):
    return nivel.upper() in ['B', 'I', 'A']

def validar_mes_ano(texto):
    return re.match(r"^(0[1-9]|1[0-2])\/\d{4}$", texto) is not None or texto.upper() == 'ATUAL'

# --- PDF Personalizado ---
class PDF(FPDF):
    def header(self):
        self.set_fill_color(70, 130, 180) # SteelBlue
        self.rect(0, 0, self.w, 20, 'F')
        self.set_font('Arial', 'B', 16)
        self.set_text_color(255, 255, 255) # White
        self.cell(0, 10, 'Currículo Profissional', 0, 1, 'C')

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(128) # Gray
        self.cell(0, 10, f'Página {self.page_no()}', 0, 0, 'C')

def gerar_pdf(data):
    pdf = PDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_text_color(0) # Black

    def secao(titulo):
        pdf.ln(4)
        pdf.set_font('Arial', 'B', 14)
        pdf.set_text_color(70, 130, 180) # SteelBlue
        pdf.cell(0, 12, titulo, 0, 1)
        pdf.set_text_color(0) # Black
        pdf.set_font('Arial', '', 12)

    secao("Dados Pessoais")
    pdf.cell(0, 10, f"Nome: {data.get('nome', 'Não informado')}", 0, 1)
    pdf.cell(0, 10, f"Idade: {data.get('idade', 'Não informada')}", 0, 1)
    pdf.cell(0, 10, f"Estado Civil: {data.get('estado_civil', 'Não informado')}", 0, 1)
    pdf.cell(0, 10, f"Telefone: {data.get('telefone', 'Não informado')}", 0, 1)
    pdf.cell(0, 10, f"E-mail: {data.get('email', 'Não informado')}", 0, 1)

    secao("Formação Acadêmica")
    if data.get('forma_2grau') == 'S':
        ano_2g = data.get('ano_2grau', 'Não informado')
        pdf.cell(0, 10, f"Ensino Médio: Concluído em {ano_2g}", 0, 1)
    else:
        pdf.cell(0, 10, f"Ensino Médio: Incompleto", 0, 1)

    graduacoes = data.get('graduacoes', [])
    if graduacoes:
        for i, grad in enumerate(graduacoes):
            pdf.cell(0, 10, f"Graduação {i+1}:", 0, 1)
            pdf.cell(0, 10, f"   Universidade: {grad.get('faculdade', '')}", 0, 1)
            pdf.cell(0, 10, f"   Curso: {grad.get('curso', '')}", 0, 1)
            sit = grad.get('situacao', '')
            if sit == 'C':
                pdf.cell(0, 10, f"   Situação: Concluído em {grad.get('ano', '')}", 0, 1)
            else:
                pdf.cell(0, 10, f"   Situação: Cursando", 0, 1)
    else:
        pdf.cell(0, 10, "Nenhuma graduação informada.", 0, 1)

    pos_graduacoes = data.get('pos_graduacoes', [])
    if pos_graduacoes:
        for i, pos in enumerate(pos_graduacoes):
            pdf.cell(0, 10, f"Pós-Graduação {i+1}:", 0, 1)
            pdf.cell(0, 10, f"   Universidade: {pos.get('faculdade', '')}", 0, 1)
            pdf.cell(0, 10, f"   Curso: {pos.get('curso', '')}", 0, 1)
            sit = pos.get('situacao', '')
            if sit == 'C':
                pdf.cell(0, 10, f"   Situação: Concluído em {pos.get('ano', '')}", 0, 1)
            else:
                pdf.cell(0, 10, f"   Situação: Cursando", 0, 1)
    else:
        pdf.cell(0, 10, "Nenhuma pós-graduação informada.", 0, 1)

    secao("Experiência Profissional")
    
    # Exibição para MEI
    if data.get('tipo_contrato') == '2':
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, "Tipo de Contrato: Microempreendedor Individual (MEI)", 0, 1)
        pdf.set_font('Arial', '', 12)
        tipos_trabalho = data.get('mei_trabalhos', '')
        if tipos_trabalho:
            pdf.set_font('Arial', 'B', 10)
            pdf.cell(0, 8, "Principais Trabalhos/Serviços:", 0, 1)
            pdf.set_font('Arial', '', 10)
            for item in tipos_trabalho.split(','):
                if item.strip():
                    pdf.multi_cell(0, 6, f"- {item.strip()}", 0, 'L')
        else:
            pdf.cell(0, 10, "Nenhum tipo de trabalho MEI informado.", 0, 1)
    
    # Exibição para CLT (mantido o fluxo original)
    elif data.get('tipo_contrato') == '1': # tipo_contrato é '1' (CLT)
        experiencias = data.get('experiencias', [])
        if experiencias:
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Tipo de Contrato: CLT", 0, 1)
            for i, exp in enumerate(experiencias):
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 10, f"Empresa {i+1}: {exp.get('empresa', '')}", 0, 1)
                pdf.set_font('Arial', '', 12)
                pdf.cell(0, 10, f"Cargo: {exp.get('cargo', '')}", 0, 1)
                pdf.cell(0, 10, f"Período: {exp.get('adm', '')} a {exp.get('dem', '')}", 0, 1)
                
                atividades = exp.get('atividades', '')
                if atividades:
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, "Principais Atividades:", 0, 1)
                    pdf.set_font('Arial', '', 10)
                    for item in atividades.split('\n'):
                        if item.strip():
                            pdf.multi_cell(0, 6, f"- {item.strip()}", 0, 'L')
                
                resultados = exp.get('resultados', '')
                if resultados:
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, "Principais Resultados:", 0, 1)
                    pdf.set_font('Arial', '', 10)
                    for item in resultados.split('\n'):
                        if item.strip():
                            pdf.multi_cell(0, 6, f"- {item.strip()}", 0, 'L')
                pdf.ln(2)
        else:
            pdf.cell(0, 10, "Nenhuma experiência profissional CLT informada.", 0, 1)
    else: # Caso o usuário tenha pulado a pergunta de contrato ou não tenha informado experiência
        pdf.cell(0, 10, "Nenhuma experiência profissional informada.", 0, 1)


    secao("Idiomas")
    idiomas = data.get('idiomas', [])
    if idiomas:
        nivel_map = {'B': 'Básico', 'I': 'Intermediário', 'A': 'Avançado'}
        for i, lang in enumerate(idiomas):
            pdf.cell(0, 10, f"Idioma {i+1}:", 0, 1)
            pdf.cell(0, 10, f"   Instituição: {lang.get('instituicao', '')}", 0, 1)
            pdf.cell(0, 10, f"   Idioma: {lang.get('nome', '')}", 0, 1)
            nivel = lang.get('nivel', '').upper()
            pdf.cell(0, 10, f"   Nível: {nivel_map.get(nivel, nivel)}", 0, 1)
            pdf.cell(0, 10, f"   Início: {lang.get('ini', '')}   |   Conclusão: {lang.get('fim', '')}", 0, 1)
            pdf.ln(1)
    else:
        pdf.cell(0, 10, "Nenhum idioma informado.", 0, 1)

    secao("Cursos Adicionais")
    cursos = data.get('cursos', '')
    if cursos:
        for item in cursos.split(','):
            pdf.cell(5)
            pdf.cell(0, 8, f"- {item.strip()}", 0, 1)
    else:
        pdf.cell(0, 8, "Nenhum curso adicional informado.", 0, 1)

    return pdf

# --- Funções Auxiliares Genéricas para Perguntas ---

async def ask_text(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str, field_key: str, next_state, validation_func=None, error_message: str = "Entrada inválida. Tente novamente."):
    text = update.message.text.strip()

    if validation_func and not validation_func(text):
        await update.message.reply_text(f"⚠️ {error_message}")
        return context.user_data.get('current_state')

    # Atribuição para campos não aninhados ou que serão tratados pela função de etapa
    if field_key not in ['faculdade', 'curso', 'situacao', 'ano', 'empresa', 'cargo', 'adm', 'dem', 'atividades', 'resultados', 'instituicao', 'nome_idioma', 'nivel', 'ini', 'fim', 'mei_trabalhos']:
        context.user_data[field_key] = text.title() if field_key not in ['email'] else text.lower()

    await update.message.reply_text(prompt)
    context.user_data['current_state'] = next_state
    return next_state

async def ask_year(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str, field_key: str, next_state):
    year = update.message.text.strip()
    if not validar_ano(year):
        await update.message.reply_text("⚠️ Ano inválido. Digite o ano com 4 dígitos, Ex: 2020")
        return context.user_data.get('current_state')
    
    if field_key not in ['ano_grad', 'pos_ano', 'idioma_ini', 'idioma_fim']:
        context.user_data[field_key] = year

    await update.message.reply_text(prompt)
    context.user_data['current_state'] = next_state
    return next_state

async def ask_option(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str, field_key: str, next_state_yes, next_state_no, valid_options: list):
    response = update.message.text.strip().upper()
    if response not in valid_options:
        await update.message.reply_text(f"⚠️ Opção inválida. Por favor, digite {', '.join(valid_options)}.")
        return context.user_data.get('current_state')

    if field_key not in ['situacao_grad', 'situacao_pos', 'nivel_idioma']:
        context.user_data[field_key] = response
    
    if response == valid_options[0]:
        await update.message.reply_text(prompt)
        context.user_data['current_state'] = next_state_yes
        return next_state_yes
    else:
        context.user_data['current_state'] = next_state_no
        return next_state_no

# --- Funções do Bot ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "👋 Olá! Vamos criar seu currículo de forma simples e gratuita.\n\n"
        "Digite *S* para começar ou *N* para sair.",
        parse_mode='Markdown'
    )
    context.user_data['current_state'] = ESCOLHA
    return ESCOLHA

async def escolha(update, context):
    resposta = update.message.text.strip().upper()
    if resposta != 'S':
        await update.message.reply_text("✅ Processo encerrado. Use /start para começar novamente.")
        return ConversationHandler.END
    await update.message.reply_text("📌 Digite seu nome completo:")
    context.user_data['current_state'] = NOME
    return NOME

async def nome(update, context):
    return await ask_text(update, context, "🎂 Digite sua idade:", 'nome', IDADE, validar_texto, "Digite seu nome completo (mínimo 2 palavras).")

async def idade(update, context):
    idade_text = update.message.text.strip()
    if not idade_text.isdigit() or not (14 <= int(idade_text) <= 99):
        await update.message.reply_text("⚠️ Idade inválida. Digite apenas números entre 14 e 99.")
        return IDADE
    context.user_data['idade'] = idade_text
    await update.message.reply_text("💍 Digite seu estado civil (Ex: Solteiro, Casado):")
    context.user_data['current_state'] = ESTADO_CIVIL
    return ESTADO_CIVIL

async def estado_civil(update, context):
    context.user_data['estado_civil'] = update.message.text.strip().title()
    await update.message.reply_text("📞 Digite seu telefone (somente números):")
    context.user_data['current_state'] = TELEFONE
    return TELEFONE

async def telefone(update, context):
    tel = update.message.text.strip()
    if not validar_telefone(tel):
        await update.message.reply_text("⚠️ Telefone inválido. Use apenas números (8 a 15 dígitos).")
        return TELEFONE
    context.user_data['telefone'] = tel
    await update.message.reply_text("📧 Digite seu e-mail:")
    context.user_data['current_state'] = EMAIL
    return EMAIL

async def email(update, context):
    email_text = update.message.text.strip()
    if not validar_email(email_text):
        await update.message.reply_text("⚠️ E-mail inválido. Tente novamente.")
        return EMAIL
    context.user_data['email'] = email_text.lower()
    await update.message.reply_text("Você concluiu o Ensino Médio? Digite S para Sim ou N para Não:")
    context.user_data['current_state'] = FORMA_2GRAU
    return FORMA_2GRAU

async def forma_2grau(update, context):
    resposta = update.message.text.strip().upper()
    if resposta not in ['S', 'N']:
        await update.message.reply_text("⚠️ Por favor, digite S para Sim ou N para Não:")
        return FORMA_2GRAU
    context.user_data['forma_2grau'] = resposta
    if resposta == 'S':
        await update.message.reply_text("Em que ano foi concluído o Ensino Médio? (Ex: 2020)")
        context.user_data['current_state'] = ANO_2GRAU
        return ANO_2GRAU
    else:
        # --- ALTERAÇÃO: Pula Graduação e Pós-Graduação se Ensino Médio não concluído ---
        context.user_data['ano_2grau'] = '' # Limpa o ano do ensino médio, pois não foi concluído
        context.user_data['graduacoes'] = [] # Garante que a lista de graduações esteja vazia
        context.user_data['pos_graduacoes'] = [] # Garante que a lista de pós-graduações esteja vazia
        await update.message.reply_text(
            "Você é um trabalhador CLT ou Microempreendedor Individual (MEI)?\n"
            "1 para CLT\n"
            "2 para Microempreendedor Individual"
        )
        context.user_data['current_state'] = TIPO_CONTRATO
        context.user_data['current_emp_index'] = 0
        context.user_data['experiencias'] = []
        context.user_data['mei_trabalhos'] = '' 
        return TIPO_CONTRATO
        # --- FIM DA ALTERAÇÃO ---

async def ano_2grau(update, context):
    ano = update.message.text.strip()
    if not validar_ano(ano):
        await update.message.reply_text("⚠️ Ano inválido. Digite o ano com 4 dígitos, Ex: 2020")
        return ANO_2GRAU
    context.user_data['ano_2grau'] = ano
    context.user_data['graduacoes'] = []
    context.user_data['pos_graduacoes'] = []
    await update.message.reply_text("Quantas graduações você possui? (Digite 0 para pular):")
    context.user_data['current_state'] = ASK_QTD_GRAD
    return ASK_QTD_GRAD

# --- Funções para Formação Acadêmica (Graduação e Pós) ---

async def ask_qtd_grad(update, context):
    qtd = update.message.text.strip()
    if not qtd.isdigit() or int(qtd) < 0:
        await update.message.reply_text("⚠️ Quantidade inválida. Digite um número (Ex: 0, 1, 2).")
        return ASK_QTD_GRAD
    
    context.user_data['qtd_grad'] = int(qtd)
    context.user_data['current_academic_level'] = 'graduacao'
    context.user_data['current_academic_index'] = 0

    if int(qtd) > 0:
        await update.message.reply_text(f"Nome da Universidade ou Faculdade da Graduação {context.user_data['current_academic_index'] + 1}:")
        context.user_data['current_state'] = ASK_FACULDADE
        return ASK_FACULDADE
    else:
        await update.message.reply_text("Quantas Pós-Graduações você possui? (Digite 0 para pular):")
        context.user_data['current_state'] = ASK_QTD_POS
        return ASK_QTD_POS

async def ask_faculdade(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o nome da Universidade ou Faculdade:")
        return ASK_FACULDADE
    
    idx = context.user_data['current_academic_index']
    if idx >= len(context.user_data.get('graduacoes', [])):
        context.user_data.setdefault('graduacoes', []).append({})
    
    context.user_data['graduacoes'][idx]['faculdade'] = text.title()
    await update.message.reply_text(f"Qual é o curso da Graduação {idx+1}? (Ex: Engenharia Civil)")
    context.user_data['current_state'] = ASK_CURSO
    return ASK_CURSO

async def ask_curso(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o curso:")
        return ASK_CURSO
    
    idx = context.user_data['current_academic_index']
    context.user_data['graduacoes'][idx]['curso'] = text.title()
    await update.message.reply_text(f"Situação da Graduação {idx+1}: C para Concluído, I para Incompleto (Cursando)")
    context.user_data['current_state'] = ASK_SITUACAO
    return ASK_SITUACAO

async def ask_situacao(update, context):
    sit = update.message.text.strip().upper()
    if sit not in ['C', 'I']:
        await update.message.reply_text("⚠️ Digite C para Concluído ou I para Incompleto (Cursando).")
        return ASK_SITUACAO
    
    idx = context.user_data['current_academic_index']
    context.user_data['graduacoes'][idx]['situacao'] = sit

    if sit == 'C':
        await update.message.reply_text(f"Em que ano foi concluída a Graduação {idx+1}? (Ex: 2025)")
        context.user_data['current_state'] = ASK_ANO_GRAD
        return ASK_ANO_GRAD
    else:
        context.user_data['graduacoes'][idx]['ano'] = ''
        await update.message.reply_text("Deseja adicionar outra Graduação? (S/N)")
        context.user_data['current_state'] = ADD_ACADEMIC_ITEM
        return ADD_ACADEMIC_ITEM

async def ask_ano_grad(update, context):
    ano = update.message.text.strip()
    if not validar_ano(ano):
        await update.message.reply_text("⚠️ Ano inválido. Digite o ano com 4 dígitos, Ex: 2025")
        return ASK_ANO_GRAD
    
    idx = context.user_data['current_academic_index']
    context.user_data['graduacoes'][idx]['ano'] = ano
    await update.message.reply_text("Deseja adicionar outra Graduação? (S/N)")
    context.user_data['current_state'] = ADD_ACADEMIC_ITEM
    return ADD_ACADEMIC_ITEM

async def add_academic_item(update, context):
    resposta = update.message.text.strip().upper()
    if resposta not in ['S', 'N']:
        await update.message.reply_text("⚠️ Opção inválida. Digite S para Sim ou N para Não:")
        return ADD_ACADEMIC_ITEM

    current_level = context.user_data['current_academic_level']

    if resposta == 'S':
        context.user_data['current_academic_index'] += 1
        if current_level == 'graduacao':
            if context.user_data['current_academic_index'] < context.user_data['qtd_grad']:
                await update.message.reply_text(f"Nome da Universidade ou Faculdade da Graduação {context.user_data['current_academic_index'] + 1}:")
                context.user_data['current_state'] = ASK_FACULDADE
                return ASK_FACULDADE
            else:
                await update.message.reply_text("Você já informou o número de graduações que desejava.")
                await update.message.reply_text("Quantas Pós-Graduações você possui? (Digite 0 para pular):")
                context.user_data['current_state'] = ASK_QTD_POS
                return ASK_QTD_POS

        elif current_level == 'pos_graduacao':
            if context.user_data['current_academic_index'] < context.user_data['qtd_pos']:
                await update.message.reply_text(f"Nome da Universidade ou Faculdade da Pós-Graduação {context.user_data['current_academic_index'] + 1}:")
                context.user_data['current_state'] = ASK_POS_FACULDADE
                return ASK_POS_FACULDADE
            else:
                await update.message.reply_text("Você já informou o número de pós-graduações que desejava.")
                await update.message.reply_text(
                    "Você é um trabalhador CLT ou Microempreendedor Individual (MEI)?\n"
                    "1 para CLT\n"
                    "2 para Microempreendedor Individual"
                )
                context.user_data['current_state'] = TIPO_CONTRATO
                context.user_data['current_emp_index'] = 0
                context.user_data['experiencias'] = []
                context.user_data['mei_trabalhos'] = '' 
                return TIPO_CONTRATO
    else: # Resposta 'N'
        if current_level == 'graduacao':
            await update.message.reply_text("Quantas Pós-Graduações você possui? (Digite 0 para pular):")
            context.user_data['current_state'] = ASK_QTD_POS
            return ASK_QTD_POS
        elif current_level == 'pos_graduacao':
            await update.message.reply_text(
                "Você é um trabalhador CLT ou Microempreendedor Individual (MEI)?\n"
                "1 para CLT\n"
                "2 para Microempreendedor Individual"
            )
            context.user_data['current_state'] = TIPO_CONTRATO
            context.user_data['current_emp_index'] = 0
            context.user_data['experiencias'] = []
            context.user_data['mei_trabalhos'] = '' 
            return TIPO_CONTRATO

# Funções para Pós-Graduação
async def ask_qtd_pos(update, context):
    qtd = update.message.text.strip()
    if not qtd.isdigit() or int(qtd) < 0:
        await update.message.reply_text("⚠️ Quantidade inválida. Digite um número (Ex: 0, 1, 2).")
        return ASK_QTD_POS
    
    context.user_data['qtd_pos'] = int(qtd)
    context.user_data['current_academic_level'] = 'pos_graduacao'
    context.user_data['current_academic_index'] = 0

    if int(qtd) > 0:
        await update.message.reply_text(f"Nome da Universidade ou Faculdade da Pós-Graduação {context.user_data['current_academic_index'] + 1}:")
        context.user_data['current_state'] = ASK_POS_FACULDADE
        return ASK_POS_FACULDADE
    else:
        await update.message.reply_text(
            "Você é um trabalhador CLT ou Microempreendedor Individual (MEI)?\n"
            "1 para CLT\n"
            "2 para Microempreendedor Individual"
        )
        context.user_data['current_state'] = TIPO_CONTRATO
        context.user_data['current_emp_index'] = 0
        context.user_data['experiencias'] = []
        context.user_data['mei_trabalhos'] = '' 
        return TIPO_CONTRATO

async def ask_pos_faculdade(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o nome da Universidade ou Faculdade:")
        return ASK_POS_FACULDADE
    
    idx = context.user_data['current_academic_index']
    if idx >= len(context.user_data.get('pos_graduacoes', [])):
        context.user_data.setdefault('pos_graduacoes', []).append({})
    
    context.user_data['pos_graduacoes'][idx]['faculdade'] = text.title()
    await update.message.reply_text(f"Qual é o curso da Pós-Graduação {idx+1}? (Ex: MBA em Gestão)")
    context.user_data['current_state'] = ASK_POS_CURSO
    return ASK_POS_CURSO

async def ask_pos_curso(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o curso:")
        return ASK_POS_CURSO
    
    idx = context.user_data['current_academic_index']
    context.user_data['pos_graduacoes'][idx]['curso'] = text.title()
    await update.message.reply_text(f"Situação da Pós-Graduação {idx+1}: C para Concluído, I para Incompleto (Cursando)")
    context.user_data['current_state'] = ASK_POS_SITUACAO
    return ASK_POS_SITUACAO

async def ask_pos_situacao(update, context):
    sit = update.message.text.strip().upper()
    if sit not in ['C', 'I']:
        await update.message.reply_text("⚠️ Digite C para Concluído ou I para Incompleto (Cursando).")
        return ASK_POS_SITUACAO
    
    idx = context.user_data['current_academic_index']
    context.user_data['pos_graduacoes'][idx]['situacao'] = sit

    if sit == 'C':
        await update.message.reply_text(f"Em que ano foi concluída a Pós-Graduação {idx+1}? (Ex: 2025)")
        context.user_data['current_state'] = ASK_POS_ANO
        return ASK_POS_ANO
    else:
        context.user_data['pos_graduacoes'][idx]['ano'] = ''
        await update.message.reply_text("Deseja adicionar outra Pós-Graduação? (S/N)")
        context.user_data['current_state'] = ADD_ACADEMIC_ITEM
        return ADD_ACADEMIC_ITEM

async def ask_pos_ano(update, context):
    ano = update.message.text.strip()
    if not validar_ano(ano):
        await update.message.reply_text("⚠️ Ano inválido. Digite o ano com 4 dígitos, Ex: 2025")
        return ASK_POS_ANO
    
    idx = context.user_data['current_academic_index']
    context.user_data['pos_graduacoes'][idx]['ano'] = ano
    await update.message.reply_text("Deseja adicionar outra Pós-Graduação? (S/N)")
    context.user_data['current_state'] = ADD_ACADEMIC_ITEM
    return ADD_ACADEMIC_ITEM

# --- Funções para Experiência Profissional ---

async def tipo_contrato(update, context):
    resposta = update.message.text.strip()
    
    if resposta == '1': # CLT
        context.user_data['tipo_contrato'] = '1'
        context.user_data['experiencias'] = [] 
        await update.message.reply_text("🏢 Nome da última empresa trabalhada (ou digite 'N' para pular):")
        context.user_data['current_state'] = EMPRESA
        context.user_data['current_emp_index'] = 0
        return EMPRESA
    elif resposta == '2': # MEI
        context.user_data['tipo_contrato'] = '2'
        await update.message.reply_text(
            "Liste o tipo de trabalho que você realiza como MEI (separando por vírgula).\n"
            "Ex: Desenvolvedor Web, Consultor de Marketing, Designer Gráfico"
        )
        context.user_data['current_state'] = MEI_TRABALHOS
        context.user_data['experiencias'] = [] 
        return MEI_TRABALHOS
    else:
        await update.message.reply_text("⚠️ Opção inválida. Digite 1 para CLT ou 2 para Microempreendedor Individual.")
        return TIPO_CONTRATO

async def mei_trabalhos(update, context):
    text = update.message.text.strip()
    context.user_data['mei_trabalhos'] = text
    await update.message.reply_text("Você possui cursos de idiomas? Digite S para Sim ou N para Não:")
    context.user_data['current_state'] = IDIOMAS_SIM
    context.user_data['current_idioma_index'] = 0
    context.user_data['idiomas'] = []
    return IDIOMAS_SIM

async def empresa(update, context):
    text = update.message.text.strip()
    if text.upper() == 'N':
        await update.message.reply_text("Você possui cursos de idiomas? Digite S para Sim ou N para Não:")
        context.user_data['current_state'] = IDIOMAS_SIM
        context.user_data['current_idioma_index'] = 0
        context.user_data['idiomas'] = []
        return IDIOMAS_SIM
    
    if not text:
        await update.message.reply_text("⚠️ Digite o nome da empresa ou 'N' para pular.")
        return EMPRESA

    idx = context.user_data['current_emp_index']
    if idx >= len(context.user_data.get('experiencias', [])):
        context.user_data.setdefault('experiencias', []).append({})
    
    context.user_data['experiencias'][idx]['empresa'] = text.title()
    await update.message.reply_text(f"Cargo exercido na {text.title()}:")
    context.user_data['current_state'] = CARGO
    return CARGO

async def cargo(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o cargo exercido:")
        return CARGO

    idx = context.user_data['current_emp_index']
    context.user_data['experiencias'][idx]['cargo'] = text.title()
    await update.message.reply_text("Data de admissão (Ex: 01/2020):")
    context.user_data['current_state'] = ADM
    return ADM

async def adm(update, context):
    text = update.message.text.strip()
    if not validar_mes_ano(text):
        await update.message.reply_text("⚠️ Data inválida. Use MM/YYYY ou 'Atual'.")
        return ADM
    
    idx = context.user_data['current_emp_index']
    context.user_data['experiencias'][idx]['adm'] = text
    await update.message.reply_text("Data de demissão ou saída (Ex: 12/2022 ou Atual):")
    context.user_data['current_state'] = DEM
    return DEM

async def dem(update, context):
    text = update.message.text.strip()
    if not validar_mes_ano(text):
        await update.message.reply_text("⚠️ Data inválida. Use MM/YYYY ou 'Atual'.")
        return DEM
    
    idx = context.user_data['current_emp_index']
    context.user_data['experiencias'][idx]['dem'] = text
    
    await update.message.reply_text(
        "Liste suas principais atividades e responsabilidades (uma por linha, ou separadas por ';').\n"
        "Exemplo:\n"
        "- Gestão de projetos\n"
        "- Desenvolvimento de software\n"
        "Ou digite 'N' para pular."
    )
    context.user_data['current_state'] = ATIVIDADES
    return ATIVIDADES

async def atividades(update, context):
    text = update.message.text.strip()
    idx = context.user_data['current_emp_index']
    
    if text.upper() == 'N':
        context.user_data['experiencias'][idx]['atividades'] = ''
    else:
        context.user_data['experiencias'][idx]['atividades'] = text.replace(';', '\n')

    await update.message.reply_text(
        "Liste seus principais resultados ou conquistas (uma por linha, ou separadas por ';').\n"
        "Exemplo:\n"
        "- Redução de custos em 15%\n"
        "- Aumento de vendas em 20%\n"
        "Ou digite 'N' para pular."
    )
    context.user_data['current_state'] = RESULTADOS
    return RESULTADOS

async def resultados(update, context):
    text = update.message.text.strip()
    idx = context.user_data['current_emp_index']

    if text.upper() == 'N':
        context.user_data['experiencias'][idx]['resultados'] = ''
    else:
        context.user_data['experiencias'][idx]['resultados'] = text.replace(';', '\n')
        
    await update.message.reply_text("Deseja adicionar outra Experiência Profissional? (S/N)")
    context.user_data['current_state'] = ADD_EMP
    return ADD_EMP

async def add_emp(update, context):
    resposta = update.message.text.strip().upper()
    if resposta not in ['S', 'N']:
        await update.message.reply_text("⚠️ Opção inválida. Digite S para Sim ou N para Não:")
        return ADD_EMP
    
    if resposta == 'S':
        context.user_data['current_emp_index'] += 1
        await update.message.reply_text(f"Nome da próxima empresa (Experiência {context.user_data['current_emp_index'] + 1}):")
        context.user_data['current_state'] = EMPRESA
        return EMPRESA
    else:
        await update.message.reply_text("Você possui cursos de idiomas? Digite S para Sim ou N para Não:")
        context.user_data['current_state'] = IDIOMAS_SIM
        context.user_data['current_idioma_index'] = 0
        context.user_data['idiomas'] = []
        return IDIOMAS_SIM

# --- Funções para Idiomas ---
async def idiomas_sim(update, context):
    resposta = update.message.text.strip().upper()
    if resposta not in ['S', 'N']:
        await update.message.reply_text("⚠️ Responda S para Sim ou N para Não:")
        return IDIOMAS_SIM

    if resposta == 'N':
        await update.message.reply_text("📚 Liste seus cursos adicionais separados por vírgula (Ex: Java, JavaScript, Excel):")
        context.user_data['current_state'] = CURSOS
        return CURSOS
    else:
        context.user_data['current_idioma_index'] = 0
        context.user_data['idiomas'] = []
        await update.message.reply_text(f"Instituição do idioma {context.user_data['current_idioma_index'] + 1}:")
        context.user_data['current_state'] = ASK_IDIOMA_INST
        return ASK_IDIOMA_INST

async def ask_idioma_inst(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o nome da instituição do idioma:")
        return ASK_IDIOMA_INST
    
    idx = context.user_data['current_idioma_index']
    if idx >= len(context.user_data.get('idiomas', [])):
        context.user_data.setdefault('idiomas', []).append({})
    
    context.user_data['idiomas'][idx]['instituicao'] = text.title() # CORREÇÃO AQUI
    await update.message.reply_text(f"Qual o nome do idioma {idx+1}? (Ex: Inglês, Espanhol)")
    context.user_data['current_state'] = ASK_IDIOMA_NOME
    return ASK_IDIOMA_NOME

async def ask_idioma_nome(update, context):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("⚠️ Digite o nome do idioma:")
        return ASK_IDIOMA_NOME
    
    idx = context.user_data['current_idioma_index']
    context.user_data['idiomas'][idx]['nome'] = text.title()
    await update.message.reply_text(f"Qual o nível do idioma {idx+1}? (B para Básico, I para Intermediário, A para Avançado)")
    context.user_data['current_state'] = ASK_IDIOMA_NIVEL
    return ASK_IDIOMA_NIVEL

async def ask_idioma_nivel(update, context):
    nivel = update.message.text.strip().upper()
    if not validar_nivel_idioma(nivel):
        await update.message.reply_text("⚠️ Nível inválido. Digite B, I ou A.")
        return ASK_IDIOMA_NIVEL
    
    idx = context.user_data['current_idioma_index']
    context.user_data['idiomas'][idx]['nivel'] = nivel
    await update.message.reply_text(f"Data de início do idioma {idx+1} (MM/YYYY):")
    context.user_data['current_state'] = ASK_IDIOMA_INI
    return ASK_IDIOMA_INI

async def ask_idioma_ini(update, context):
    text = update.message.text.strip()
    if not validar_mes_ano(text):
        await update.message.reply_text("⚠️ Data inválida. Use MM/YYYY ou 'Atual'.")
        return ASK_IDIOMA_INI
    
    idx = context.user_data['current_idioma_index']
    context.user_data['idiomas'][idx]['ini'] = text
    await update.message.reply_text(f"Data de conclusão do idioma {idx+1} (MM/YYYY ou 'Atual'):")
    context.user_data['current_state'] = ASK_IDIOMA_FIM
    return ASK_IDIOMA_FIM

async def ask_idioma_fim(update, context):
    text = update.message.text.strip()
    if not validar_mes_ano(text):
        await update.message.reply_text("⚠️ Data inválida. Use MM/YYYY ou 'Atual'.")
        return ASK_IDIOMA_FIM
    
    idx = context.user_data['current_idioma_index']
    context.user_data['idiomas'][idx]['fim'] = text
    await update.message.reply_text("Deseja adicionar outro idioma? (S/N)")
    context.user_data['current_state'] = ADD_IDIOMA
    return ADD_IDIOMA

async def add_idioma(update, context):
    resposta = update.message.text.strip().upper()
    if resposta not in ['S', 'N']:
        await update.message.reply_text("⚠️ Opção inválida. Digite S para Sim ou N para Não:")
        return ADD_IDIOMA
    
    if resposta == 'S':
        context.user_data['current_idioma_index'] += 1
        await update.message.reply_text(f"Instituição do idioma {context.user_data['current_idioma_index'] + 1}:")
        context.user_data['current_state'] = ASK_IDIOMA_INST
        return ASK_IDIOMA_INST
    else:
        await update.message.reply_text("📚 Liste seus cursos adicionais separados por vírgula (Ex: Java, JavaScript, Excel):")
        context.user_data['current_state'] = CURSOS
        return CURSOS

# --- Funções para Cursos Adicionais e Finalização ---
async def cursos(update, context):
    text = update.message.text.strip()
    context.user_data['cursos'] = text
    await update.message.reply_text("✅ Ótimo! Coletamos todas as informações. Deseja gerar o currículo em PDF? (S/N)")
    context.user_data['current_state'] = REINICIAR
    return REINICIAR

async def reiniciar(update, context):
    resposta = update.message.text.strip().upper()
    if resposta == 'S':
        pdf = gerar_pdf(context.user_data)
        buf = io.BytesIO()
        pdf.output(buf, 'F')
        buf.seek(0)
        await update.message.reply_document(buf, filename="curriculo.pdf")
        await update.message.reply_text("Seu currículo foi gerado com sucesso! Use /start para criar um novo ou /cancel para encerrar.")
        return ConversationHandler.END
    elif resposta == 'N':
        await update.message.reply_text("✅ Processo encerrado. Use /start para começar novamente.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("⚠️ Opção inválida. Digite S para Sim ou N para Não.")
        return REINICIAR

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "❌ Conversa cancelada. Use /start para começar novamente."
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token("7501669528:AAGMiGmscYFhhnSwGsENZlu1kcauoVI-UIM").build() # Substitua pelo seu token

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ESCOLHA: [MessageHandler(filters.TEXT & ~filters.COMMAND, escolha)],
            NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nome)],
            IDADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, idade)],
            ESTADO_CIVIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, estado_civil)],
            TELEFONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, telefone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            FORMA_2GRAU: [MessageHandler(filters.TEXT & ~filters.COMMAND, forma_2grau)],
            ANO_2GRAU: [MessageHandler(filters.TEXT & ~filters.COMMAND, ano_2grau)],

            ASK_QTD_GRAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_qtd_grad)],
            ASK_FACULDADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_faculdade)],
            ASK_CURSO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_curso)],
            ASK_SITUACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_situacao)],
            ASK_ANO_GRAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_ano_grad)],
            ADD_ACADEMIC_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_academic_item)],

            ASK_QTD_POS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_qtd_pos)],
            ASK_POS_FACULDADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pos_faculdade)],
            ASK_POS_CURSO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pos_curso)],
            ASK_POS_SITUACAO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pos_situacao)],
            ASK_POS_ANO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pos_ano)],
            
            TIPO_CONTRATO: [MessageHandler(filters.TEXT & ~filters.COMMAND, tipo_contrato)],
            MEI_TRABALHOS: [MessageHandler(filters.TEXT & ~filters.COMMAND, mei_trabalhos)],
            EMPRESA: [MessageHandler(filters.TEXT & ~filters.COMMAND, empresa)],
            CARGO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cargo)],
            ADM: [MessageHandler(filters.TEXT & ~filters.COMMAND, adm)],
            DEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, dem)],
            ATIVIDADES: [MessageHandler(filters.TEXT & ~filters.COMMAND, atividades)],
            RESULTADOS: [MessageHandler(filters.TEXT & ~filters.COMMAND, resultados)],
            ADD_EMP: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_emp)],

            IDIOMAS_SIM: [MessageHandler(filters.TEXT & ~filters.COMMAND, idiomas_sim)],
            ASK_IDIOMA_INST: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_idioma_inst)],
            ASK_IDIOMA_NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_idioma_nome)],
            ASK_IDIOMA_NIVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_idioma_nivel)],
            ASK_IDIOMA_INI: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_idioma_ini)],
            ASK_IDIOMA_FIM: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_idioma_fim)],
            ADD_IDIOMA: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_idioma)],

            CURSOS: [MessageHandler(filters.TEXT & ~filters.COMMAND, cursos)],
            REINICIAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, reiniciar)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
 
 
 
